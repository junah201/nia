service: nia

provider:
  name: aws
  runtime: python3.10
  region: ap-northeast-2
  profile: nia
  logRetentionInDays: 30
  architecture: arm64
  memorySize: 128
  timeout: 29
  versionFunctions: false
  stage: prod
  tags:
    Service: ${self:service}
    Environment: ${self:provider.stage}
  iam:
    role: LambdaDefaultRole

resources:
  Resources:
    LambdaDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-LambdaDefaultRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
        Policies:
          - PolicyName: ${self:service}-LambdaDefaultPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"

package:
  include:
    - "lambdas/**"
    - "shared/**"
  exclude:
    - "node_modules/**"
    - "venv/**"
    - ".git/**"
    - ".github/**"
    - "frontend/**"
    - "serverless.yml"
    - ".serverless/**"

custom:
  pythonRequirements:
    slim: true
    usePoetry: true

plugins:
  - serverless-python-requirements
